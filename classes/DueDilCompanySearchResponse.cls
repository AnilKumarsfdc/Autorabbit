//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public with sharing class DueDilCompanySearchResponse {

	public class Industries {
		public String name {get;set;} 
		public String code {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Industries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Industries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Meta {
		public String code {get;set;} 
		public List<String> messages {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'messages') {
							messages = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Geolocation {
		public Double latitude {get;set;} 
		public Double longitude {get;set;} 

		public Geolocation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'latitude') {
							latitude = parser.getDoubleValue();
						} else if (text == 'longitude') {
							longitude = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Geolocation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StructuredAddress_Z {
		public String premises {get;set;} 
		public String postTown {get;set;} 
		public String county {get;set;} 
		public String postcode {get;set;} 
		public String countryCode {get;set;} 

		public StructuredAddress_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'premises') {
							premises = parser.getText();
						} else if (text == 'postTown') {
							postTown = parser.getText();
						} else if (text == 'county') {
							county = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StructuredAddress_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RegisteredAddress_Z {
		public String fullAddress {get;set;} 
		public StructuredAddress_Y structuredAddress {get;set;} 
		public Geolocation geolocation {get;set;} 
		public List<String> types {get;set;} 

		public RegisteredAddress_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress_Y(parser);
						} else if (text == 'geolocation') {
							geolocation = new Geolocation(parser);
						} else if (text == 'types') {
							types = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'RegisteredAddress_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StructuredAddress_Y {
		public String premises {get;set;} 
		public String thoroughfare {get;set;} 
		public String dependentLocality {get;set;} 
		public String postTown {get;set;} 
		public String county {get;set;} 
		public String postcode {get;set;} 
		public String countryCode {get;set;} 

		public StructuredAddress_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'premises') {
							premises = parser.getText();
						} else if (text == 'thoroughfare') {
							thoroughfare = parser.getText();
						} else if (text == 'dependentLocality') {
							dependentLocality = parser.getText();
						} else if (text == 'postTown') {
							postTown = parser.getText();
						} else if (text == 'county') {
							county = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StructuredAddress_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TradingAddress {
		public String fullAddress {get;set;} 
		public StructuredAddress_Z structuredAddress {get;set;} 
		public Geolocation geolocation {get;set;} 
		public List<String> types {get;set;} 

		public TradingAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress_Z(parser);
						} else if (text == 'geolocation') {
							geolocation = new Geolocation(parser);
						} else if (text == 'types') {
							types = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'TradingAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Paging {
		public Integer totalRecords {get;set;} 
		public Integer pageSize {get;set;} 
		public Integer pageNumber {get;set;} 

		public Paging(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'totalRecords') {
							totalRecords = parser.getIntegerValue();
						} else if (text == 'pageSize') {
							pageSize = parser.getIntegerValue();
						} else if (text == 'pageNumber') {
							pageNumber = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Paging consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String countryCode {get;set;} 
		public String companyId {get;set;} 
		public String name {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String incorporationDate {get;set;} 
		public String officialStatus {get;set;} 
		public String simplifiedStatus {get;set;} 
		public RegisteredAddress registeredAddress {get;set;} 
		public RegisteredAddress tradingAddress {get;set;} 
		public Integer charitableIdentitiesCount {get;set;} 
		public List<Industries> industries {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'countryCode') {
							countryCode = parser.getText();
						} else if (text == 'companyId') {
							companyId = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'incorporationDate') {
							incorporationDate = parser.getText();
						} else if (text == 'officialStatus') {
							officialStatus = parser.getText();
						} else if (text == 'simplifiedStatus') {
							simplifiedStatus = parser.getText();
						} else if (text == 'registeredAddress') {
							registeredAddress = new RegisteredAddress(parser);
						} else if (text == 'tradingAddress') {
							tradingAddress = new RegisteredAddress(parser);
						} else if (text == 'charitableIdentitiesCount') {
							charitableIdentitiesCount = parser.getIntegerValue();
						} else if (text == 'industries') {
							industries = arrayOfIndustries(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Industries_Z {
		public String type_Z {get;set;} // in json: type

		public Industries_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Industries_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StructuredAddress {
		public String premises {get;set;} 
		public String thoroughfare {get;set;} 
		public String postTown {get;set;} 
		public String county {get;set;} 
		public String postcode {get;set;} 
		public String countryCode {get;set;} 

		public StructuredAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'premises') {
							premises = parser.getText();
						} else if (text == 'thoroughfare') {
							thoroughfare = parser.getText();
						} else if (text == 'postTown') {
							postTown = parser.getText();
						} else if (text == 'county') {
							county = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StructuredAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RegisteredAddress {
		public String fullAddress {get;set;} 
		public StructuredAddress structuredAddress {get;set;} 
		public Geolocation geolocation {get;set;} 
		public List<String> types {get;set;} 

		public RegisteredAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress(parser);
						} else if (text == 'geolocation') {
							geolocation = new Geolocation(parser);
						} else if (text == 'types') {
							types = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'RegisteredAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Data> data {get;set;} 
	public Paging paging {get;set;} 
	public Meta meta {get;set;} 

	public DueDilCompanySearchResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = arrayOfData(parser);
					} else if (text == 'paging') {
						paging = new Paging(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'DueDilCompanySearchResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static DueDilCompanySearchResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DueDilCompanySearchResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<Industries_Z> arrayOfIndustries_Z(System.JSONParser p) {
        List<Industries_Z> res = new List<Industries_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Industries_Z(p));
        }
        return res;
    }




    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }








    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }








    private static List<Industries> arrayOfIndustries(System.JSONParser p) {
        List<Industries> res = new List<Industries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Industries(p));
        }
        return res;
    }






}