//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class DueDilGetCharityDataResponse {

	public class CharityRegisteredNames {
		public List<Data_Y> data {get;set;} 
		public Paging paging {get;set;} 

		public CharityRegisteredNames(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_Y(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CharityRegisteredNames consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Meta {
		public String code {get;set;} 
		public List<String> messages {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'messages') {
							messages = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CharityVitals {
		public String countryCode {get;set;} 
		public String charityId {get;set;} 
		public String name {get;set;} 
		public RegisteredAs registeredAs {get;set;} 
		public Boolean isFilingCharity {get;set;} 
		public Boolean isSubsidiaryCharity {get;set;} 
		public String firstRegisteredDate {get;set;} 
		public CurrentStatus currentStatus {get;set;} 
		public OfficialContact officialContact {get;set;} 

		public CharityVitals(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'countryCode') {
							countryCode = parser.getText();
						} else if (text == 'charityId') {
							charityId = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'registeredAs') {
							registeredAs = new RegisteredAs(parser);
						} else if (text == 'isFilingCharity') {
							isFilingCharity = parser.getBooleanValue();
						} else if (text == 'isSubsidiaryCharity') {
							isSubsidiaryCharity = parser.getBooleanValue();
						} else if (text == 'firstRegisteredDate') {
							firstRegisteredDate = parser.getText();
						} else if (text == 'currentStatus') {
							currentStatus = new CurrentStatus(parser);
						} else if (text == 'officialContact') {
							officialContact = new OfficialContact(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CharityVitals consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CurrentStatus {
		public String status {get;set;} 
		public String startDate {get;set;} 

		public CurrentStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getText();
						} else if (text == 'startDate') {
							startDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CurrentStatus consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OfficialContact {
		public String email {get;set;} 
		public String telephoneNumber {get;set;} 
        public String fullAddress {get;set;}

		public OfficialContact(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'email') {
							email = parser.getText();
						} else if (text == 'telephoneNumber') {
							telephoneNumber = parser.getText();
						} else if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'OfficialContact consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Paging {
		public Integer totalRecords {get;set;} 
		public Integer pageSize {get;set;} 
		public Integer pageNumber {get;set;} 

		public Paging(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'totalRecords') {
							totalRecords = parser.getIntegerValue();
						} else if (text == 'pageSize') {
							pageSize = parser.getIntegerValue();
						} else if (text == 'pageNumber') {
							pageNumber = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Paging consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String sourceName {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sourceName') {
							sourceName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CharityStatuses {
		public List<Data_Z> data {get;set;} 
		public Paging paging {get;set;} 

		public CharityStatuses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_Z(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CharityStatuses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Data_V data {get;set;} 
	public Meta meta {get;set;} 

	public DueDilGetCharityDataResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = new Data_V(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'DueDilGetCharityDataResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Data_Y {
		public String name {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Data_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CharityFinancials {
		public List<Data_W> data {get;set;} 
		public Paging paging {get;set;} 

		public CharityFinancials(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_W(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CharityFinancials consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_Z {
		public String simplifiedStatus {get;set;} 
		public String startDate {get;set;} 

		public Data_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'simplifiedStatus') {
							simplifiedStatus = parser.getText();
						} else if (text == 'startDate') {
							startDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_W {

		public Data_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Data_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_X {
		public String classifier {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Data_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'classifier') {
							classifier = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CharityClassifiers {
		public List<Data_X> data {get;set;} 
		public Paging paging {get;set;} 

		public CharityClassifiers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_X(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CharityClassifiers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_V {
		public String charityId {get;set;} 
		public String countryCode {get;set;} 
		public CharityVitals charityVitals {get;set;} 
		public CharityTrustees charityTrustees {get;set;} 
		public CharityStatuses charityStatuses {get;set;} 
		public CharityTrustees charityAreasOfActivities {get;set;} 
		public CharityRegisteredNames charityRegisteredNames {get;set;} 
		public CharityClassifiers charityClassifiers {get;set;} 
		public CharityFinancials charityFinancials {get;set;} 

		public Data_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'charityId') {
							charityId = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else if (text == 'charityVitals') {
							charityVitals = new CharityVitals(parser);
						} else if (text == 'charityTrustees') {
							charityTrustees = new CharityTrustees(parser);
						} else if (text == 'charityStatuses') {
							charityStatuses = new CharityStatuses(parser);
						} else if (text == 'charityAreasOfActivities') {
							charityAreasOfActivities = new CharityTrustees(parser);
						} else if (text == 'charityRegisteredNames') {
							charityRegisteredNames = new CharityRegisteredNames(parser);
						} else if (text == 'charityClassifiers') {
							charityClassifiers = new CharityClassifiers(parser);
						} else if (text == 'charityFinancials') {
							charityFinancials = new CharityFinancials(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RegisteredAs {
		public String registeredCharityNumber {get;set;} 
		public String subsidiaryNumber {get;set;} 
		public String nationalJurisdiction {get;set;} 
		public List<RegionalJurisdictions> regionalJurisdictions {get;set;} 
		public String charitableObjects {get;set;} 

		public RegisteredAs(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'registeredCharityNumber') {
							registeredCharityNumber = parser.getText();
						} else if (text == 'subsidiaryNumber') {
							subsidiaryNumber = parser.getText();
						} else if (text == 'nationalJurisdiction') {
							nationalJurisdiction = parser.getText();
						} else if (text == 'regionalJurisdictions') {
							regionalJurisdictions = arrayOfRegionalJurisdictions(parser);
						} else if (text == 'charitableObjects') {
							charitableObjects = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'RegisteredAs consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CharityTrustees {
		public List<Data> data {get;set;} 
		public Paging paging {get;set;} 

		public CharityTrustees(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CharityTrustees consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class RegionalJurisdictions{
		public String name {get;set;}

		public RegionalJurisdictions(JSONParser parser){
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'CharityTrustees consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static DueDilGetCharityDataResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DueDilGetCharityDataResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<Data_Z> arrayOfData_Z(System.JSONParser p) {
        List<Data_Z> res = new List<Data_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_Z(p));
        }
        return res;
    }


    private static List<Data_W> arrayOfData_W(System.JSONParser p) {
        List<Data_W> res = new List<Data_W>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_W(p));
        }
        return res;
    }





    private static List<RegionalJurisdictions> arrayOfRegionalJurisdictions(System.JSONParser p) {
        List<RegionalJurisdictions> res = new List<RegionalJurisdictions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new RegionalJurisdictions(p));
        }
        return res;
    }






    private static List<Data_X> arrayOfData_X(System.JSONParser p) {
        List<Data_X> res = new List<Data_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_X(p));
        }
        return res;
    }












    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }






    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


    private static List<Data_Y> arrayOfData_Y(System.JSONParser p) {
        List<Data_Y> res = new List<Data_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_Y(p));
        }
        return res;
    }
}