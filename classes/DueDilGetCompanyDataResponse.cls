//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class DueDilGetCompanyDataResponse {

	public class CompanyIndustries {
		public List<Data_Z> data {get;set;} 
		public Paging paging {get;set;} 

		public CompanyIndustries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_Z(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CompanyIndustries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Meta {
		public String code {get;set;} 
		public List<String> messages {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'messages') {
							messages = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Geolocation {
		public Double latitude {get;set;} 
		public Double longitude {get;set;} 

		public Geolocation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'latitude') {
							latitude = parser.getDoubleValue();
						} else if (text == 'longitude') {
							longitude = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Geolocation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public String fullAddress {get;set;} 
		public StructuredAddress_Z structuredAddress {get;set;} 
		public Geolocation geolocation {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress_Z(parser);
						} else if (text == 'geolocation') {
							geolocation = new Geolocation(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StructuredAddress_Z {
		public String premises {get;set;} 
		public String thoroughfare {get;set;} 
		public String postcode {get;set;} 
		public String countryCode {get;set;} 

		public StructuredAddress_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'premises') {
							premises = parser.getText();
						} else if (text == 'thoroughfare') {
							thoroughfare = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StructuredAddress_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Paging {
		public Integer totalRecords {get;set;} 
		public Integer pageSize {get;set;} 
		public Integer pageNumber {get;set;} 

		public Paging(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'totalRecords') {
							totalRecords = parser.getIntegerValue();
						} else if (text == 'pageSize') {
							pageSize = parser.getIntegerValue();
						} else if (text == 'pageNumber') {
							pageNumber = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Paging consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String name {get;set;} 
		public String startDate {get;set;} 
		public String endDate {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'startDate') {
							startDate = parser.getText();
						} else if (text == 'endDate') {
							endDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CompanyAddresses {
		public List<Data_Y> data {get;set;} 
		public Paging paging {get;set;} 

		public CompanyAddresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_Y(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CompanyAddresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StructuredAddress {
		public String premises {get;set;} 
		public String thoroughfare {get;set;} 
		public String postTown {get;set;} 
		public String county {get;set;} 
		public String postcode {get;set;} 
		public String countryCode {get;set;} 

		public StructuredAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'premises') {
							premises = parser.getText();
						} else if (text == 'thoroughfare') {
							thoroughfare = parser.getText();
						} else if (text == 'postTown') {
							postTown = parser.getText();
						} else if (text == 'county') {
							county = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StructuredAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CompanyWebsites {
		public List<Data_W> data {get;set;} 
		public Paging paging {get;set;} 

		public CompanyWebsites(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_W(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CompanyWebsites consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_Y {
		public String fullAddress {get;set;} 
		public StructuredAddress structuredAddress {get;set;} 
		public Geolocation geolocation {get;set;} 
		public List<String> types {get;set;} 

		public Data_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress(parser);
						} else if (text == 'geolocation') {
							geolocation = new Geolocation(parser);
						} else if (text == 'types') {
							types = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_Z {
		public String name {get;set;} 
		public String code {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Data_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'code') {
							code = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CompanyTelephoneNumbers {
		public List<Data_X> data {get;set;} 
		public Paging paging {get;set;} 

		public CompanyTelephoneNumbers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData_X(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CompanyTelephoneNumbers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_W {
		public String website {get;set;} 
		public String score {get;set;} 

		public Data_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'website') {
							website = parser.getText();
						} else if (text == 'score') {
							score = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_X {
		public String telephoneNumber {get;set;} 
		public Address address {get;set;} 
		public Boolean tpsRegistered {get;set;} 

		public Data_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'telephoneNumber') {
							telephoneNumber = parser.getText();
						} else if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'tpsRegistered') {
							tpsRegistered = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Data_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RegisteredAddress {
		public String fullAddress {get;set;} 
		public StructuredAddress structuredAddress {get;set;} 
		public Geolocation geolocation {get;set;} 

		public RegisteredAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress(parser);
						} else if (text == 'geolocation') {
							geolocation = new Geolocation(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'RegisteredAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CompanyVitals {
		public String countryCode {get;set;} 
		public String companyId {get;set;} 
		public String name {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String incorporationCountry {get;set;} 
		public String incorporationDate {get;set;} 
		public String officialStatus {get;set;} 
		public String simplifiedStatus {get;set;} 
		public Integer numberOfEmployees {get;set;} 
		public String primaryWebsite {get;set;} 
		public RegisteredAddress registeredAddress {get;set;} 
		public Integer charitableIdentitiesCount {get;set;} 
		public Accounts accounts {get;set;} 
		public FinancialSummary financialSummary {get;set;} 

		public CompanyVitals(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'countryCode') {
							countryCode = parser.getText();
						} else if (text == 'companyId') {
							companyId = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'incorporationCountry') {
							incorporationCountry = parser.getText();
						} else if (text == 'incorporationDate') {
							incorporationDate = parser.getText();
						} else if (text == 'officialStatus') {
							officialStatus = parser.getText();
						} else if (text == 'simplifiedStatus') {
							simplifiedStatus = parser.getText();
						} else if (text == 'numberOfEmployees') {
							numberOfEmployees = parser.getIntegerValue();
						} else if (text == 'primaryWebsite') {
							primaryWebsite = parser.getText();
						} else if (text == 'registeredAddress') {
							registeredAddress = new RegisteredAddress(parser);
						} else if (text == 'charitableIdentitiesCount') {
							charitableIdentitiesCount = parser.getIntegerValue();
						} else if (text == 'accounts') {
							accounts = new Accounts(parser);
						} else if (text == 'financialSummary') {
							financialSummary = new FinancialSummary(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CompanyVitals consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Data_V data {get;set;} 
	public Meta meta {get;set;} 

	public DueDilGetCompanyDataResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = new Data_V(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'DueDilGetCompanyDataResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Data_V {
		public String companyId {get;set;} 
		public String countryCode {get;set;} 
		public CompanyVitals companyVitals {get;set;} 
		public CompanyRegisteredNames companyRegisteredNames {get;set;} 
		public CompanyIndustries companyIndustries {get;set;} 
		public CompanyAddresses companyAddresses {get;set;} 
		public CompanyTelephoneNumbers companyTelephoneNumbers {get;set;} 
		public CompanyWebsites companyWebsites {get;set;} 

		public Data_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'companyId') {
							companyId = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else if (text == 'companyVitals') {
							companyVitals = new CompanyVitals(parser);
						} else if (text == 'companyRegisteredNames') {
							companyRegisteredNames = new CompanyRegisteredNames(parser);
						} else if (text == 'companyIndustries') {
							companyIndustries = new CompanyIndustries(parser);
						} else if (text == 'companyAddresses') {
							companyAddresses = new CompanyAddresses(parser);
						} else if (text == 'companyTelephoneNumbers') {
							companyTelephoneNumbers = new CompanyTelephoneNumbers(parser);
						} else if (text == 'companyWebsites') {
							companyWebsites = new CompanyWebsites(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FinancialSummary {
		public Long turnover {get;set;} 
		public Long ebitda {get;set;} 
		public Long postTaxProfit {get;set;} 
		public Long totalAssets {get;set;} 
		public Long netAssets {get;set;} 

		public FinancialSummary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'turnover') {
							turnover = parser.getLongValue();
						} else if (text == 'ebitda') {
							ebitda = parser.getLongValue();
						} else if (text == 'postTaxProfit') {
							postTaxProfit = parser.getLongValue();
						} else if (text == 'totalAssets') {
							totalAssets = parser.getLongValue();
						} else if (text == 'netAssets') {
							netAssets = parser.getLongValue();
						} else {
							System.debug(LoggingLevel.WARN, 'FinancialSummary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class CompanyRegisteredNames {
		public List<Data> data {get;set;} 
		public Paging paging {get;set;} 

		public CompanyRegisteredNames(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'CompanyRegisteredNames consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Accounts {
		public String filingType {get;set;} 
		public String currency_Z {get;set;} 
		public String latestAccountsDate {get;set;} 
		public Boolean consolidatedAccounts {get;set;} 
		public String nextAccountsDueDate {get;set;} 

		public Accounts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'filingType') {
							filingType = parser.getText();
						} else if (text == 'currency') {
							currency_Z = parser.getText();
						} else if (text == 'latestAccountsDate') {
							latestAccountsDate = parser.getText();
						} else if (text == 'consolidatedAccounts') {
							consolidatedAccounts = parser.getBooleanValue();
						} else if (text == 'nextAccountsDueDate') {
							nextAccountsDueDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Accounts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static DueDilGetCompanyDataResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DueDilGetCompanyDataResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	














    private static List<Data_W> arrayOfData_W(System.JSONParser p) {
        List<Data_W> res = new List<Data_W>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_W(p));
        }
        return res;
    }







    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }



    private static List<Data_Y> arrayOfData_Y(System.JSONParser p) {
        List<Data_Y> res = new List<Data_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_Y(p));
        }
        return res;
    }


    private static List<Data_Z> arrayOfData_Z(System.JSONParser p) {
        List<Data_Z> res = new List<Data_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_Z(p));
        }
        return res;
    }









    private static List<Data_X> arrayOfData_X(System.JSONParser p) {
        List<Data_X> res = new List<Data_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data_X(p));
        }
        return res;
    }




}