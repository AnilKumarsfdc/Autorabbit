//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class DueDilGetOfficerDataResponse {

	public class DateOfBirth {
		public Integer year {get;set;} 
		public Integer month {get;set;} 

		public DateOfBirth(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'year') {
							year = parser.getIntegerValue();
						} else if (text == 'month') {
							month = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'DateOfBirth consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Meta {
		public String code {get;set;} 
		public List<String> messages {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'messages') {
							messages = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ServiceAddress {
		public String fullAddress {get;set;} 
		public StructuredAddress structuredAddress {get;set;} 

		public ServiceAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fullAddress') {
							fullAddress = parser.getText();
						} else if (text == 'structuredAddress') {
							structuredAddress = new StructuredAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ServiceAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Paging {
		public Integer totalRecords {get;set;} 
		public Integer pageSize {get;set;} 
		public Integer pageNumber {get;set;} 

		public Paging(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'totalRecords') {
							totalRecords = parser.getIntegerValue();
						} else if (text == 'pageSize') {
							pageSize = parser.getIntegerValue();
						} else if (text == 'pageNumber') {
							pageNumber = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Paging consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OfficerAppointment {
		public List<Data> data {get;set;} 
		public Paging paging {get;set;} 

		public OfficerAppointment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'data') {
							data = arrayOfData(parser);
						} else if (text == 'paging') {
							paging = new Paging(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OfficerAppointment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Disqualifications {

		public Disqualifications(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Disqualifications consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String companyId {get;set;} 
		public String countryCode {get;set;} 
		public String name {get;set;} 
		public List<Appointments> appointments {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'companyId') {
							companyId = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'appointments') {
							appointments = arrayOfAppointments(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StructuredAddress {
		public String premises {get;set;} 
		public String postTown {get;set;} 
		public String postcode {get;set;} 
		public String countryCode {get;set;} 

		public StructuredAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'premises') {
							premises = parser.getText();
						} else if (text == 'postTown') {
							postTown = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StructuredAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OfficerVital {
		public String officerId {get;set;} 
		public String type_Z {get;set;} // in json: type
		public Person person {get;set;} 
		public List<Disqualifications> disqualifications {get;set;} 

		public OfficerVital(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'officerId') {
							officerId = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'person') {
							person = new Person(parser);
						} else if (text == 'disqualifications') {
							disqualifications = arrayOfDisqualifications(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OfficerVital consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data_Z {
		public OfficerVital officerVital {get;set;} 
		public OfficerAppointment officerAppointment {get;set;} 

		public Data_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'officerVital') {
							officerVital = new OfficerVital(parser);
						} else if (text == 'officerAppointment') {
							officerAppointment = new OfficerAppointment(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Nationalities {
		public String demonym {get;set;} 
		public String countryCode {get;set;} 

		public Nationalities(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'demonym') {
							demonym = parser.getText();
						} else if (text == 'countryCode') {
							countryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Nationalities consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Appointments {
		public String status {get;set;} 
		public String startDate {get;set;} 
		public String officialRole {get;set;} 
		public String selfDescribedPosition {get;set;} 
		public ServiceAddress serviceAddress {get;set;} 
		public String endDate {get;set;} 

		public Appointments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getText();
						} else if (text == 'startDate') {
							startDate = parser.getText();
						} else if (text == 'officialRole') {
							officialRole = parser.getText();
						} else if (text == 'selfDescribedPosition') {
							selfDescribedPosition = parser.getText();
						} else if (text == 'serviceAddress') {
							serviceAddress = new ServiceAddress(parser);
						} else if (text == 'endDate') {
							endDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Appointments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Appointments_Z {
		public String status {get;set;} 
		public String startDate {get;set;} 
		public String officialRole {get;set;} 
		public ServiceAddress serviceAddress {get;set;} 

		public Appointments_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'status') {
							status = parser.getText();
						} else if (text == 'startDate') {
							startDate = parser.getText();
						} else if (text == 'officialRole') {
							officialRole = parser.getText();
						} else if (text == 'serviceAddress') {
							serviceAddress = new ServiceAddress(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Appointments_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Data_Z data {get;set;} 
	public Meta meta {get;set;} 

	public DueDilGetOfficerDataResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'data') {
						data = new Data_Z(parser);
					} else if (text == 'meta') {
						meta = new Meta(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'DueDilGetOfficerDataResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Person {
		public String honorific {get;set;} 
		public String firstName {get;set;} 
		public String middleName {get;set;} 
		public String lastName {get;set;} 
		public List<Nationalities> nationalities {get;set;} 
		public DateOfBirth dateOfBirth {get;set;} 

		public Person(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'honorific') {
							honorific = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'middleName') {
							middleName = parser.getText();
						} else if (text == 'lastName') {
							lastName = parser.getText();
						} else if (text == 'nationalities') {
							nationalities = arrayOfNationalities(parser);
						} else if (text == 'dateOfBirth') {
							dateOfBirth = new DateOfBirth(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Person consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static DueDilGetOfficerDataResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DueDilGetOfficerDataResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	




    private static List<Nationalities> arrayOfNationalities(System.JSONParser p) {
        List<Nationalities> res = new List<Nationalities>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Nationalities(p));
        }
        return res;
    }

    private static List<Appointments> arrayOfAppointments(System.JSONParser p) {
        List<Appointments> res = new List<Appointments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Appointments(p));
        }
        return res;
    }

    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }

    private static List<Appointments_Z> arrayOfAppointments_Z(System.JSONParser p) {
        List<Appointments_Z> res = new List<Appointments_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Appointments_Z(p));
        }
        return res;
    }

    private static List<Disqualifications> arrayOfDisqualifications(System.JSONParser p) {
        List<Disqualifications> res = new List<Disqualifications>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Disqualifications(p));
        }
        return res;
    }

    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }
}