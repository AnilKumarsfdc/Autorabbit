//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

@IsTest
public class DueDilGetOfficerDataResponse_Test {
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'    \"data\": {'+
		'        \"officerVital\": {'+
		'            \"officerId\": \"919801033\",'+
		'            \"type\": \"person\",'+
		'            \"person\": {'+
		'                \"honorific\": \"Mr\",'+
		'                \"firstName\": \"Peter\",'+
		'                \"middleName\": \"Damian\",'+
		'                \"lastName\": \"Kimmelman\",'+
		'                \"nationalities\": ['+
		'                    {'+
		'                        \"demonym\": \"American\",'+
		'                        \"countryCode\": \"US\"'+
		'                    }'+
		'                ],'+
		'                \"dateOfBirth\": {'+
		'                    \"year\": 1982,'+
		'                    \"month\": 10'+
		'                }'+
		'            },'+
		'            \"disqualifications\": []'+
		'        },'+
		'        \"officerAppointment\": {'+
		'            \"data\": ['+
		'                {'+
		'                    \"companyId\": \"11451343\",'+
		'                    \"countryCode\": \"GB\",'+
		'                    \"name\": \"Under Tech UK Ltd\",'+
		'                    \"appointments\": ['+
		'                        {'+
		'                            \"status\": \"open\",'+
		'                            \"startDate\": \"2018-07-05\",'+
		'                            \"officialRole\": \"Director\",'+
		'                            \"selfDescribedPosition\": \"Businessman\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"10 Queen St Pl, London, United Kingdom, EC4R 1AG\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"10 Queen St Pl\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"EC4R 1AG\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        }'+
		'                    ]'+
		'                },'+
		'                {'+
		'                    \"companyId\": \"08565148\",'+
		'                    \"countryCode\": \"GB\",'+
		'                    \"name\": \"Founders For Good Ltd\",'+
		'                    \"appointments\": ['+
		'                        {'+
		'                            \"status\": \"open\",'+
		'                            \"startDate\": \"2015-05-26\",'+
		'                            \"officialRole\": \"Director\",'+
		'                            \"selfDescribedPosition\": \"Entrepreneur\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"25 Christopher Street, London, England, EC2A 2BS\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"25 Christopher Street\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"EC2A 2BS\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        }'+
		'                    ]'+
		'                },'+
		'                {'+
		'                    \"companyId\": \"06999618\",'+
		'                    \"countryCode\": \"GB\",'+
		'                    \"name\": \"DueDil Limited\",'+
		'                    \"appointments\": ['+
		'                        {'+
		'                            \"status\": \"retired\",'+
		'                            \"startDate\": \"2009-08-25\",'+
		'                            \"endDate\": \"2018-08-08\",'+
		'                            \"officialRole\": \"Secretary\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"10 Queen Street Place, London, United Kingdom, EC4R 1AG\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"10 Queen Street Place\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"EC4R 1AG\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        },'+
		'                        {'+
		'                            \"status\": \"retired\",'+
		'                            \"startDate\": \"2009-08-25\",'+
		'                            \"endDate\": \"2018-08-08\",'+
		'                            \"officialRole\": \"Director\",'+
		'                            \"selfDescribedPosition\": \"Director\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"10 Queen Street Place, London, United Kingdom, EC4R 1AG\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"10 Queen Street Place\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"EC4R 1AG\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        }'+
		'                    ]'+
		'                },'+
		'                {'+
		'                    \"companyId\": \"06294206\",'+
		'                    \"countryCode\": \"GB\",'+
		'                    \"name\": \"We Are Vi Ltd\",'+
		'                    \"appointments\": ['+
		'                        {'+
		'                            \"status\": \"closed\",'+
		'                            \"startDate\": \"2007-06-27\",'+
		'                            \"officialRole\": \"Director\",'+
		'                            \"selfDescribedPosition\": \"Managing Director\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"8 St Pauls Place, London, N1 2QE\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"8 St Pauls Place\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"N1 2QE\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        },'+
		'                        {'+
		'                            \"status\": \"retired\",'+
		'                            \"startDate\": \"2007-07-01\",'+
		'                            \"endDate\": \"2007-07-31\",'+
		'                            \"officialRole\": \"Secretary\",'+
		'                            \"selfDescribedPosition\": \"Managing Director\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"8 St Pauls Place, London, N1 2QE\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"8 St Pauls Place\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"N1 2QE\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        }'+
		'                    ]'+
		'                },'+
		'                {'+
		'                    \"companyId\": \"05986802\",'+
		'                    \"countryCode\": \"GB\",'+
		'                    \"name\": \"Mackim Gaming Ltd\",'+
		'                    \"appointments\": ['+
		'                        {'+
		'                            \"status\": \"closed\",'+
		'                            \"startDate\": \"2006-11-02\",'+
		'                            \"officialRole\": \"Secretary\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"8 St Pauls Place, London, N1 2QE\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"8 St Pauls Place\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"N1 2QE\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        },'+
		'                        {'+
		'                            \"status\": \"closed\",'+
		'                            \"startDate\": \"2006-11-02\",'+
		'                            \"officialRole\": \"Director\",'+
		'                            \"serviceAddress\": {'+
		'                                \"fullAddress\": \"8 St Pauls Place, London, N1 2QE\",'+
		'                                \"structuredAddress\": {'+
		'                                    \"premises\": \"8 St Pauls Place\",'+
		'                                    \"postTown\": \"London\",'+
		'                                    \"postcode\": \"N1 2QE\",'+
		'                                    \"countryCode\": \"GB\"'+
		'                                }'+
		'                            }'+
		'                        }'+
		'                    ]'+
		'                }'+
		'            ],'+
		'            \"paging\": {'+
		'                \"totalRecords\": 5,'+
		'                \"pageSize\": 10,'+
		'                \"pageNumber\": 1'+
		'            }'+
		'        }'+
		'    },'+
		'    \"meta\": {'+
		'        \"code\": \"000000\",'+
		'        \"messages\": ['+
		'            \"Request processed successfully\"'+
		'        ]'+
		'    }'+
		'}';
		DueDilGetOfficerDataResponse r = DueDilGetOfficerDataResponse.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.DateOfBirth objDateOfBirth = new DueDilGetOfficerDataResponse.DateOfBirth(System.JSON.createParser(json));
		System.assert(objDateOfBirth != null);
		System.assert(objDateOfBirth.year == null);
		System.assert(objDateOfBirth.month == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Meta objMeta = new DueDilGetOfficerDataResponse.Meta(System.JSON.createParser(json));
		System.assert(objMeta != null);
		System.assert(objMeta.code == null);
		System.assert(objMeta.messages == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.ServiceAddress objServiceAddress = new DueDilGetOfficerDataResponse.ServiceAddress(System.JSON.createParser(json));
		System.assert(objServiceAddress != null);
		System.assert(objServiceAddress.fullAddress == null);
		System.assert(objServiceAddress.structuredAddress == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Paging objPaging = new DueDilGetOfficerDataResponse.Paging(System.JSON.createParser(json));
		System.assert(objPaging != null);
		System.assert(objPaging.totalRecords == null);
		System.assert(objPaging.pageSize == null);
		System.assert(objPaging.pageNumber == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.OfficerAppointment objOfficerAppointment = new DueDilGetOfficerDataResponse.OfficerAppointment(System.JSON.createParser(json));
		System.assert(objOfficerAppointment != null);
		System.assert(objOfficerAppointment.data == null);
		System.assert(objOfficerAppointment.paging == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Disqualifications objDisqualifications = new DueDilGetOfficerDataResponse.Disqualifications(System.JSON.createParser(json));
		System.assert(objDisqualifications != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Data objData = new DueDilGetOfficerDataResponse.Data(System.JSON.createParser(json));
		System.assert(objData != null);
		System.assert(objData.companyId == null);
		System.assert(objData.countryCode == null);
		System.assert(objData.name == null);
		System.assert(objData.appointments == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.StructuredAddress objStructuredAddress = new DueDilGetOfficerDataResponse.StructuredAddress(System.JSON.createParser(json));
		System.assert(objStructuredAddress != null);
		System.assert(objStructuredAddress.premises == null);
		System.assert(objStructuredAddress.postTown == null);
		System.assert(objStructuredAddress.postcode == null);
		System.assert(objStructuredAddress.countryCode == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.OfficerVital objOfficerVital = new DueDilGetOfficerDataResponse.OfficerVital(System.JSON.createParser(json));
		System.assert(objOfficerVital != null);
		System.assert(objOfficerVital.officerId == null);
		System.assert(objOfficerVital.type_Z == null);
		System.assert(objOfficerVital.person == null);
		System.assert(objOfficerVital.disqualifications == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Data_Z objData_Z = new DueDilGetOfficerDataResponse.Data_Z(System.JSON.createParser(json));
		System.assert(objData_Z != null);
		System.assert(objData_Z.officerVital == null);
		System.assert(objData_Z.officerAppointment == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Nationalities objNationalities = new DueDilGetOfficerDataResponse.Nationalities(System.JSON.createParser(json));
		System.assert(objNationalities != null);
		System.assert(objNationalities.demonym == null);
		System.assert(objNationalities.countryCode == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Appointments objAppointments = new DueDilGetOfficerDataResponse.Appointments(System.JSON.createParser(json));
		System.assert(objAppointments != null);
		System.assert(objAppointments.status == null);
		System.assert(objAppointments.startDate == null);
		System.assert(objAppointments.officialRole == null);
		System.assert(objAppointments.selfDescribedPosition == null);
		System.assert(objAppointments.serviceAddress == null);
		System.assert(objAppointments.endDate == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Appointments_Z objAppointments_Z = new DueDilGetOfficerDataResponse.Appointments_Z(System.JSON.createParser(json));
		System.assert(objAppointments_Z != null);
		System.assert(objAppointments_Z.status == null);
		System.assert(objAppointments_Z.startDate == null);
		System.assert(objAppointments_Z.officialRole == null);
		System.assert(objAppointments_Z.serviceAddress == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse objDueDilGetOfficerDataResponse = new DueDilGetOfficerDataResponse(System.JSON.createParser(json));
		System.assert(objDueDilGetOfficerDataResponse != null);
		System.assert(objDueDilGetOfficerDataResponse.data == null);
		System.assert(objDueDilGetOfficerDataResponse.meta == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		DueDilGetOfficerDataResponse.Person objPerson = new DueDilGetOfficerDataResponse.Person(System.JSON.createParser(json));
		System.assert(objPerson != null);
		System.assert(objPerson.honorific == null);
		System.assert(objPerson.firstName == null);
		System.assert(objPerson.middleName == null);
		System.assert(objPerson.lastName == null);
		System.assert(objPerson.nationalities == null);
		System.assert(objPerson.dateOfBirth == null);
	}
}