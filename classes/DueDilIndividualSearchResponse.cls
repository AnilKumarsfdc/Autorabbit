//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public with sharing class DueDilIndividualSearchResponse {

    public class DateOfBirth {
        public Integer year {get;set;} 
        public Integer month {get;set;} 

        public DateOfBirth(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'year') {
                            year = parser.getIntegerValue();
                        } else if (text == 'month') {
                            month = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'DateOfBirth consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Meta {
        public String code {get;set;} 
        public List<String> messages {get;set;} 

        public Meta(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'code') {
                            code = parser.getText();
                        } else if (text == 'messages') {
                            messages = arrayOfString(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public List<Data> data {get;set;} 
    public Paging paging {get;set;} 
    public Meta meta {get;set;} 

    public DueDilIndividualSearchResponse(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'data') {
                        data = arrayOfData(parser);
                    } else if (text == 'paging') {
                        paging = new Paging(parser);
                    } else if (text == 'meta') {
                        meta = new Meta(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'DueDilIndividualSearchResponse consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class Person_Z {
        public String firstName {get;set;} 
        public String lastName {get;set;} 
        public List<Nationalities_Z> nationalities {get;set;} 
        public DateOfBirth dateOfBirth {get;set;} 

        public Person_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'firstName') {
                            firstName = parser.getText();
                        } else if (text == 'lastName') {
                            lastName = parser.getText();
                        } else if (text == 'nationalities') {
                            nationalities = arrayOfNationalities_Z(parser);
                        } else if (text == 'dateOfBirth') {
                            dateOfBirth = new DateOfBirth(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Person_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Nationalities {
        public String demonym {get;set;} 
        public String countryCode {get;set;} 

        public Nationalities(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'demonym') {
                            demonym = parser.getText();
                        } else if (text == 'countryCode') {
                            countryCode = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Nationalities consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Paging {
        public Integer totalRecords {get;set;} 
        public Integer pageSize {get;set;} 
        public Integer pageNumber {get;set;} 

        public Paging(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'totalRecords') {
                            totalRecords = parser.getIntegerValue();
                        } else if (text == 'pageSize') {
                            pageSize = parser.getIntegerValue();
                        } else if (text == 'pageNumber') {
                            pageNumber = parser.getIntegerValue();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Paging consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Nationalities_Z {

        public Nationalities_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        {
                            System.debug(LoggingLevel.WARN, 'Nationalities_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Data {
        public String officerId {get;set;} 
        public String type_Z {get;set;} // in json: type
        public Person person {get;set;} 

        public Data(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'officerId') {
                            officerId = parser.getText();
                        } else if (text == 'type') {
                            type_Z = parser.getText();
                        } else if (text == 'person') {
                            person = new Person(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Person_Y {
        public String firstName {get;set;} 
        public String lastName {get;set;} 
        public String middleName {get;set;} 
        public List<Nationalities> nationalities {get;set;} 
        public DateOfBirth dateOfBirth {get;set;} 

        public Person_Y(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'firstName') {
                            firstName = parser.getText();
                        } else if (text == 'lastName') {
                            lastName = parser.getText();
                        } else if (text == 'middleName') {
                            middleName = parser.getText();
                        } else if (text == 'nationalities') {
                            nationalities = arrayOfNationalities(parser);
                        } else if (text == 'dateOfBirth') {
                            dateOfBirth = new DateOfBirth(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Person_Y consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Person {
        public String honorific {get;set;} 
        public String firstName {get;set;} 
        public String lastName {get;set;} 
        public String middleName {get;set;} 
        public List<Nationalities> nationalities {get;set;} 
        public DateOfBirth dateOfBirth {get;set;} 

        public Person(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'honorific') {
                            honorific = parser.getText();
                        } else if (text == 'firstName') {
                            firstName = parser.getText();
                        } else if (text == 'lastName') {
                            lastName = parser.getText();
                        } else if (text == 'middleName') {
                            middleName = parser.getText();
                        } else if (text == 'nationalities') {
                            nationalities = arrayOfNationalities(parser);
                        } else if (text == 'dateOfBirth') {
                            dateOfBirth = new DateOfBirth(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Person consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static DueDilIndividualSearchResponse parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new DueDilIndividualSearchResponse(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }
    



    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }






    private static List<Nationalities> arrayOfNationalities(System.JSONParser p) {
        List<Nationalities> res = new List<Nationalities>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Nationalities(p));
        }
        return res;
    }




    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


 private static List<Nationalities_Z> arrayOfNationalities_Z(System.JSONParser p) {
        List<Nationalities_Z> res = new List<Nationalities_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Nationalities_Z(p));
        }
        return res;
    }

}